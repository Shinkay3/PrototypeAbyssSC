#include <eosio/eosio.hpp>
#include <eosiock/eosiock.hpp>

#pragma once
#include <eosio/serialize.hpp>
#include "eosiock/types.hpp"
#include <eosio/crypto.hpp>
#include <eosiock/rsa.hpp>

#include <eosiock/utils.hpp>

using namespace eosiock;

static class dataverification
{
    public:
        static bool verify_signature(bytes_view sig, bytes_view msg)
        {
            auto exponent = "010001"_hex;
            //auto modulus = "A76593C82CC94767C205E018B01B4CAB72757E85C535A3FF2D18121063DC48F9AD5A4262265F102B8B69CF9A901D618A243B9437961055628CE4ED65BCE78EB9A67439DE94D84E0F11B4F9E599239CE6B72DC528CC9AFC445631B74888BC47DEA4F75B182D80D170C307BF4527A88C02A127DED23CF4353EB4E34F2156FEFC24CB26861A8EFD5762D687E2EB81F9F86CCDB47B81CD14175D776030D8F1B2015A2208A474D72F298A928D5FF38855B2480439C702D1766710AF3D9E5071019C7D2CE0FB8D4419DAAEEB6336ECD88DB234AF746C55A70FB2BC1F5A84871BB67EC9B97EE024E0A5A70045FDB336DA772B380E28F5AF2169C4417E20C505A2D7784D"_hex;
            auto modulus = "CEFCDC5ABCC1B89E031852333295C4272A50738077BB66E058357915F76B73690C85FAF0B22D0424C6FA902DCCFEE354FDBB08AF3DE3CBF814A5623D479BCFEE75AA86F9F6F6B56B1F14D33D6300FE14657740522D1EABF056C52EC6B433015C9820C6500658E1FF5F813C75D4F8DFB442DD537A155AC80FD157C87AFA2B053D"_hex;
            //auto sig = "2727323C3CF558556723AC5202EE3B957599F50E5618B34F84CA404D00D842963B4D1FE6C5C7063725CE1A4BCBFA656A4686AFB2122FB3A78832C59AAF6B1D883B7F6A6EC05154F5BCF8F0A4BF0E81CC81949AD57AAF53A1258ADFADB4CDD335B5439460106E5FEF631481B44C8CC447E0F5F30235F1446E833574E55B8CCB7A15B36F2ABBE5748E0936F39C8DCBE536BD7D14E3503F7A1576E68498494842FCF49B9A5B447FFEB0D4B41D29A144B3B19F87D002A4AD42E3C09EDCC43B698FE9ADCC33BD01FA5D2B928F53C6A4D65974E817ED8C84C703B1AF9A77CE67D867375D212121FB9275D9B28FBED03EFEFF19F3E6FF7CC1E218B683D87CD2BC8F742F"_hex;
            //bytes_view msg = "6F773163792E77616D2C3232"_hex;
            auto pubkey = rsa_public_key_view(modulus,exponent);
            auto md = eosio::sha512((const char*)msg.data(), msg.size());

            //assert_rsa_sha512_signature(pubkey,md,sig,"failed");

            if(!verify_rsa_sha512(pubkey,md,sig))
            {
                return false;
            }

            return true; 
        };


    private:

};